//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TicketCrawler.Worker.TicketCrawlerServer {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TicketCrawlerServer.ITicketCrawlerServer", CallbackContract=typeof(TicketCrawler.Worker.TicketCrawlerServer.ITicketCrawlerServerCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ITicketCrawlerServer {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITicketCrawlerServer/RegisterWorker")]
        void RegisterWorker(string workerEndpointUrl);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITicketCrawlerServer/RegisterWorker")]
        System.Threading.Tasks.Task RegisterWorkerAsync(string workerEndpointUrl);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITicketCrawlerServer/MakeRequest")]
        void MakeRequest(TicketCrawler.Core.Event.EventRequest request);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITicketCrawlerServer/MakeRequest")]
        System.Threading.Tasks.Task MakeRequestAsync(TicketCrawler.Core.Event.EventRequest request);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITicketCrawlerServer/ProcessResponseFromWorker")]
        void ProcessResponseFromWorker(TicketCrawler.Core.Event.EventResponse response);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITicketCrawlerServer/ProcessResponseFromWorker")]
        System.Threading.Tasks.Task ProcessResponseFromWorkerAsync(TicketCrawler.Core.Event.EventResponse response);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITicketCrawlerServerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITicketCrawlerServer/ReturnResponse")]
        void ReturnResponse(TicketCrawler.Core.Event.EventResponse response);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITicketCrawlerServerChannel : TicketCrawler.Worker.TicketCrawlerServer.ITicketCrawlerServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TicketCrawlerServerClient : System.ServiceModel.DuplexClientBase<TicketCrawler.Worker.TicketCrawlerServer.ITicketCrawlerServer>, TicketCrawler.Worker.TicketCrawlerServer.ITicketCrawlerServer {
        
        public TicketCrawlerServerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public TicketCrawlerServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public TicketCrawlerServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TicketCrawlerServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TicketCrawlerServerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RegisterWorker(string workerEndpointUrl) {
            base.Channel.RegisterWorker(workerEndpointUrl);
        }
        
        public System.Threading.Tasks.Task RegisterWorkerAsync(string workerEndpointUrl) {
            return base.Channel.RegisterWorkerAsync(workerEndpointUrl);
        }
        
        public void MakeRequest(TicketCrawler.Core.Event.EventRequest request) {
            base.Channel.MakeRequest(request);
        }
        
        public System.Threading.Tasks.Task MakeRequestAsync(TicketCrawler.Core.Event.EventRequest request) {
            return base.Channel.MakeRequestAsync(request);
        }
        
        public void ProcessResponseFromWorker(TicketCrawler.Core.Event.EventResponse response) {
            base.Channel.ProcessResponseFromWorker(response);
        }
        
        public System.Threading.Tasks.Task ProcessResponseFromWorkerAsync(TicketCrawler.Core.Event.EventResponse response) {
            return base.Channel.ProcessResponseFromWorkerAsync(response);
        }
    }
}
